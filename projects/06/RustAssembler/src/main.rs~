use std::env;
use std::fs::File;
use std::io::{Write, Result};
mod Parser;
mod Code;


fn main(){
    //Get args and new instance:codes
    let args: Vec<String> = env::args().collect();
    let filename = &args[1];
    let mut codes = Parser::CodeReader::new(filename.to_string());

    //create out file
    let mut out_file = File::create("test.hack");

    //check!
    while codes.hasMoreCommands(){
	let mut bin_line: u16 = 0;
	codes.advance();

	if codes.commandType()=="C_COMMAND"{
	    bin_line += 0b111 << 13;
	    bin_line += Code::comp(codes.comp()) << 6;
	    bin_line += Code::dest(codes.dest()) << 3;
	    bin_line += Code::jump(codes.jump());				 
	}

        else if codes.commandType()=="A_COMMAND"{
	    //it is not supported SYMBOL
	    bin_line += codes.symbol().parse::<u16>().unwrap();
	}

	else{
	    panic!("undefined COMMAND");
	}

	println!("{}", codes.current_line);
	println!("{:0>16}", format!("{:b}", bin_line));
	out_file.write_all(format!("{:0>16}", format!("{:b}", bin_line)));
    }
    out_file.flush();
	    
}
