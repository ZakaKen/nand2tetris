// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean COLOR;
    static int SCREEN;
    static Array twoToThe;
    
    /** Initializes the Screen. */
    function void init() {
       let COLOR = true;
       let SCREEN = 16384;
       let twoToThe = Array.new(17);
       let twoToThe[0] = 1;
       let twoToThe[1] = 2;
       let twoToThe[2] = 4;
       let twoToThe[3] = 8;
       let twoToThe[4] = 16;
       let twoToThe[5] = 32;
       let twoToThe[6] = 64;
       let twoToThe[7] = 128;
       let twoToThe[8] = 256;
       let twoToThe[9] = 512;
       let twoToThe[10] = 1024;
       let twoToThe[11] = 2048;
       let twoToThe[12] = 4096;
       let twoToThe[13] = 8192;
       let twoToThe[14] = 16384;
       let twoToThe[15] = ~32767;
       let twoToThe[16] = 0;
       
       return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
       var int i;
       do Screen.setColor(false);
       while(i<216){
          do Screen.drawLine(0, i, 511, i);
	  let i = i+1;
       }
       do Screen.setColor(true);
       return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
       let COLOR = b;
       return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
       var int pix, i, addr;
       let addr = SCREEN + (y*32) + (x/16);
       let pix = Memory.peek(addr);
       let i = x&15;
       if(COLOR){
          let pix = (pix|twoToThe[i]);
       }
       else{
          let pix = (pix&(~twoToThe[i]));
       }
       do Memory.poke(addr, pix);
       return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
       var int adyMinusbdx, a, b, dx, dy;
       var boolean neg_dx, neg_dy;

       let adyMinusbdx = 0;
       let a = 0;
       let b = 0;
       
       let dy = y2-y1;
       if(dy=0){
          do Screen.drawHline(x1, x2, y1);
	  return;
       }
       let neg_dy = false;
       if(dy<0){
          let neg_dy = true;
       }
       let dy = Math.abs(dy);

       let dx = x2-x1;
       if(dx=0){
          let adyMinusbdx = adyMinusbdx+1;
       }
       let neg_dx = false;
       if(dx<0){
          let neg_dx = true;
       }
       let dx = Math.abs(dx);


       do Screen.drawPixel(x1, y1);
       while(~((a=dx)&(b=dy))){
          if(adyMinusbdx <0){
	     let adyMinusbdx = adyMinusbdx + dy;
	     let a = a+1;
	  }
	  else{
	     let adyMinusbdx = adyMinusbdx - dx;
	     let b = b+1;
	  }
	  
	  if((neg_dx)&(neg_dy)){
	     do Screen.drawPixel(x1-a, y1-b);
	  }
	  if((~neg_dx)&(neg_dy)){
	     do Screen.drawPixel(x1+a, y1-b);
	  }
	  if((neg_dx)&(~neg_dy)){
	     do Screen.drawPixel(x1-a, y1+b);
	  }
	  if((~neg_dx)&(~neg_dy)){
	     do Screen.drawPixel(x1+a, y1+b);
	  }
	  
	  
       }
       return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
       do Screen.drawLine(x1, y1, x2, y1);
       while(y1<y2){
	  let y1 = y1 + 1;
	  do Screen.drawLine(x1, y1, x2, y1);
       }
       return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
       var int D, a, b;
       let a = r;
       let b = 0;
       let D = 3 - (2*r);
       if(r>181){
          return;
       }


       do Screen.drawLine((x-a), (y+b), (x+a), (y+b));
       do Screen.drawLine((x-a), (y-b), (x+a), (y-b));
       while(~(b>a)){
          if(D<0){
             let D = D + (4*b) + 6;
      	     let b = b+1;
          }
          else{
             let D = D -(4*a) + (4*b) + 10;
	     let a = a-1;
	     let b = b+1;
          }
	  do Screen.drawLine((x-a), (y+b), (x+a), (y+b));
	  do Screen.drawLine((x-a), (y-b), (x+a), (y-b));
          do Screen.drawLine((x-b), (y+a), (x+b), (y+a));
	  do Screen.drawLine((x-b), (y-a), (x+b), (y-a));
       }

       return;
    }
    
    function void drawHline(int x1, int x2, int y){
       var int buf, begin, end, dx_word, remain, pix, i, addr;
       if(x2<x1){
          let buf = x1;
          let x1 = x2;
          let x2 = buf;
       }

       
       let begin = x1/16;
       let end = x2/16;
       let dx_word = end-begin;
       let y = y*32;
       let addr = SCREEN + y + begin;


       if(dx_word=0){
          let remain = x2&15;
	  let pix = twoToThe[remain+1]-1;
	  let remain = x1&15;
	  let pix = pix - (twoToThe[remain]-1);
	  if(COLOR){
	     let pix = (pix|Memory.peek(addr));
	  }
	  else{
	     let pix = ((~pix)&Memory.peek(addr));
	  }
	  do Memory.poke(addr, pix);
	  return;
       }
       
       //midth
       if(COLOR){
          let pix = ~0;
       }
       else{
          let pix = 0;
       }
       let i = 1;
       while(i<dx_word){
          do Memory.poke((addr+i), pix);    
          let i=i+1; 
       }

       //edge_left
       let remain = x1&15;
       let pix = ~(twoToThe[remain]-1);
       if(COLOR){
          let pix = (pix|Memory.peek(addr));
       }
       else{
          let pix = ((~pix)&Memory.peek(addr));
       }
       do Memory.poke(addr, pix);    
       

       //edge_right
       let remain = x2&15;
       let pix = twoToThe[remain+1]-1;
       if(COLOR){
          let pix = (pix|Memory.peek((addr+dx_word)) );
       }
       else{
          let pix = ((~pix)&Memory.peek((addr+dx_word)) );
       }
       do Memory.poke((addr+dx_word), pix);    
       
       return;
    }

}
