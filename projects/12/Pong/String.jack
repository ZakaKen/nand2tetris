// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array Str;
    field int Index, Length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
       var int i;
       if(maxLength = 0){
          let maxLength = 1;
       }
       let Str =  Array.new(maxLength);
       let Length = maxLength;
       let Index = 0;

       while(i<maxLength){
          let Str[i] = 32;
	  let i = i + 1;
       }
       return this;
    }

    /** Disposes this string. */
    method void dispose() {
       do Str.dispose();
       return;

    }

    /** Returns the current length of this string. */
    method int length() {
       return Index;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
       return Str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
       let Str[j] = c;
       return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
       if(Index < Length){
          let Str[Index] = c;
	  let Index = Index + 1;
       }
       else{
       }
       return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
       return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
       var int i, result;
       var boolean neg;
       let i = 0;
       let result = 0;
       let neg = false;
       
       while(i<(Index)){
	  if((i=0)&(Str[i]=45)){
	     let neg = true;
	  }
	  if((Str[i]>47)&(Str[i]<58)){
	     let result = (10*result) + (Str[i]-48);
	  }
	  let i = i+1;
       }
       
       if(neg){
          return -result;
       }
       else{
          return result;
       }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
       var boolean neg;
       var int i;
       let neg = false;
       
       if(val<0){
          let neg = true;
       }
       let val = Math.abs(val);

       do clearString();
       if(neg){
          do appendChar(45);
       }
       do setInt_do(val);
       
       return;
    }

    method void setInt_do(int val){
       var int digit;
       var int c;
       let digit = val - ((val/10)*10);
       let c = digit + 48;

       if(val<10){
          do appendChar(c);
       }
       else{
          do setInt_do(val/10);
	  do appendChar(c);
       }
       return;
    }

    method void clearString(){
       var int i;
       let i = 0;
       while(i<Length){
          let Str[i] = 32;
	  let i = i+1;
       }
       let Index = 0;
       return;
    }

    /** Returns the new line character. */
    function char newLine() {
       return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
       return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
       return 34;
    }
}
