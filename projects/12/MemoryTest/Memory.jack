// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int freeList;
    static Array memory;

    /** Initializes the class. */
    function void init() {
       let memory = 0;
       let freeList = 2048;
       let memory[freeList] = 14335;
       let memory[freeList+1] = 0;
       return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
       return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
       let memory[address] = value;
       return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
       var int length, segment, block;
       var boolean find;
       let find = false;

       let segment = freeList;
       while(~find){
          if(segment=0){
	     do Sys.error(99);
	  }
	  let length = memory[segment];
          if(length > size){
	     let find = true;
	     let memory[segment] = length - (size+1);
	     let block = segment + memory[segment];
	     let memory[block] = size+1;
	  }
	  else{
   	     let segment = memory[segment+1];
	  }
       }
       
       return (block+1);
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
       var int segment, length;
       var int next, i;
       var boolean find;
       let i = 0;
       
       let segment = o-1;
       let length = o[-1];

       //reset
       while(i<length){
          let memory[segment+i] = 0;
	  let i = i+1;
       }

       //append segment to freeList
       let find = false;
       let next = freeList;
       while(~find){
          if(memory[next+1]=0){
	     let memory[next+1] = segment;
	     let find = true;
	  }
	  else{
	     let next = memory[next+1];
	  }
       }
       return;
    }    
}
